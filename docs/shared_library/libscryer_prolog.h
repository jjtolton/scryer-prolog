/* Package version: 0.9.4 */

#pragma once

/* Generated with cbindgen:0.27.0 */

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */



typedef struct Machine Machine;

typedef struct QueryState QueryState;

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

/**
 * Consults a Scryer Prolog module from a string, optionally with a given module name.
 *
 * # Safety
 *
 * * `machine` must be a valid mutable pointer to a [`Machine`] created by
 * [`machine_new`] that has not yet been freed.
 * * `input` must be a valid pointer to a null terminated UTF-8 string of valid
 * Scryer Prolog code that satisfies the safety requirements of [`CStr::from_ptr`].
 * * `module_name`, must be a valid pointer to a null terminated UTF-8 string
 * of a valid Prolog module name that satisfies the safety requirements of
 * [`CStr::from_ptr`].
 * * there must be no [`QueryState`] for this [`Machine`] that has been created by
 * [`run_query_iter`] that has not yet been freed by
 * [`query_state_free`], or the [`Machine`] will enter an undefined state
 * with unpredictable behavior.
 *
 * # Arguments
 *
 * * `machine` - A mutable reference to the [`Machine`] to load the module into.
 * * `module_name` - A pointer to a null-terminated UTF-8 string representing
 * Scryer Prolog module name.
 * * `input` - A pointer to a null-terminated UTF-8 string representing Scryer Prolog code.
 *
 * # Returns
 *
 * - [`true`] if the module was successfully loaded.
 * - [`false`] if an error occurred while loading the module.
 */
void scryer_consult_module_string(struct Machine *machine,
                                  const char *module_name,
                                  const char *input);

/**
 * Deallocate a Scryer Prolog string.
 *
 * # Safety
 *
 * * it is the caller's responsibility to ensure the `ptr` is not deallocated more than
 * once.
 */
void scryer_free_c_string(char *ptr);

/**
 * Frees the memory occupied by a [`Machine`] object.
 *
 * # Safety
 *
 * * It is the caller's responsibility to ensure that the input is a valid [`Machine`] pointer
 * created by [`machine_new`] that has not yet been freed by this function.
 * * Any [`QueryState`] instances associated with this machine should be deallocated prior
 * to calling this function on the input, otherwise those [`QueryState`] instances may
 * not be deallocated until the program terminates.
 *
 */
void scryer_machine_free(struct Machine *ptr);

/**
 * Create a new instance of the Scryer Machine.
 *
 *
 * It is the caller's responsibility to maintain a reference to the machine pointer
 * created by this function, passing it to [`machine_free`] to deallocate
 * resources. Failure to do so may lead to memory leaks.
 *
 */
struct Machine *scryer_machine_new(void);

/**
 * Cleans up the [`QueryState`] in the associated Scryer [`Machine`].
 *
 * # Safety
 *
 * * `query_state` must be a valid mutable pointer to a [`QueryState`] created by [`run_query_iter`]
 * that has not yet been freed by [`query_state_free`].
 * * There can be only one [`QueryState`] per [`Machine`] started by
 * [`run_query_iter`] that has not yet been freed with
 * [`query_state_free`] or the [`Machine`] state will enter an undefined
 * configuration with unpredictable results.
 */
void scryer_query_state_free(struct QueryState *query_state);

/**
 * Greedily evaluate a prolog query, returning all results in a JSON-formatted string.
 *
 * # Safety
 *
 * * `machine` must be a valid [`Machine`] pointer created with [`machine_new`]
 * that has not yet been freed.
 * * `query_state` must be a valid [`QueryState`] created with
 * [`run_query_iter`] that has not yet been freed.
 * * There must be no existing [`QueryState`] for this [`Machine`] started by
 * [`run_query_iter`] that has not yet been freed with
 * [`query_state_free`] or the [`Machine`] state will enter an undefined
 * configuration with unpredictable results.
 * * it is the responsibility of the caller to deallocate the pointer returned by
 * this function with [`scyer_free_c_string`] in order to avoid memory leaks.
 * * once the first boolean result has been returned, the query has been exhausted,
 * and the caller should call [`query_state_free`] on the
 * [`QueryState`] before calling any other [`Machine`] functions from this shared library.
 *
 *
 * # Returns
 * - Returns a pointer to a JSON formatted, null terminated UTF-8 string
 *
 * # Response Format
 * ```json
 * // if result is a binding
 *
 * // current limitation is that only concrete (equality) bindings are returned,
 * // residual goals not yet supported.
 * {
 *   "status": "ok",  // Can also be "error" or "panic"
 *   "result": [{ ... }],
 * }
 *
 * // if result is a boolean goal
 *
 * {
 *   "status": "ok",  // Can also be "error" or "panic"
 *   "result": boolean
 * }
 *
 * // if panic
 * {
 *   "status": "error" | "panic",
 *   "error": error message | "panic"
 * }
 */
char *scryer_run_query(struct Machine *machine, const char *input);

/**
 * Returns a new query generator for the given virtual machine.
 *
 * # Safety
 *
 * Caller must satisfy the following preconditions for this function:
 *
 * * Valid [`Machine`] pointer created with [`machine_new`] that has not yet been freed.
 * * the input fulfill the safety requirements of [`CStr::From_ptr`].
 * * There must be no other [`QueryState`] for this [`Machine`] started by
 * [`run_query_iter`] that has not yet been freed with
 * [`query_state_free`] or the [`Machine`] state will enter an undefined
 * configuration with unpredictable results.
 *
 * Other concerns:
 * * after invoking this function, calling any other function besides [`run_query_next`]
 * before invoking [`query_state_free`] on the [`Machine`] pointer and [`QueryState`] pointer
 * will leave the [`Machine`] in an undefined state
 *
 */
struct QueryState *scryer_run_query_iter(struct Machine *machine, const char *input);

/**
 * Returns a NULL POINTER if no addition iterations, else returns a
 * JSON encoded UTF-8 string with one iteration of results from a Scryer Prolog query.
 *
 * See documentation for known limitations (e.g., concrete goals only).
 *
 * # Safety
 *
 * * `query_state` must be a valid mutable pointer to a [`QueryState`] created by [`run_query_iter`]
 * that has not yet been freed by [`query_state_free`].
 * * There can be only one [`QueryState`] per [`Machine`] started by
 * [`run_query_iter`] that has not yet been freed with
 * [`query_state_free`] or the [`Machine`] state will enter an undefined
 * configuration with unpredictable results.
 */
char *scryer_run_query_next(struct QueryState *query_state);

#ifdef __cplusplus
}  // extern "C"
#endif  // __cplusplus
